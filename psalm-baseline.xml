<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.16.0@2897ba636551a8cb61601cc26f6ccfbba6c36591">
  <file src="src/AbstractValue.php">
    <DocblockTypeContradiction>
      <code>! static::$generator</code>
      <code>static::$generator</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </InvalidArgument>
    <InvalidMethodCall>
      <code>children</code>
    </InvalidMethodCall>
    <InvalidPropertyFetch>
      <code><![CDATA[$value->member]]></code>
    </InvalidPropertyFetch>
    <MissingReturnType>
      <code>createSimpleXMLElement</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$element</code>
      <code><![CDATA[$member->value]]></code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$data</code>
      <code>$element</code>
      <code>$key</code>
      <code>$member</code>
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedPropertyFetch>
      <code><![CDATA[$data->value]]></code>
      <code><![CDATA[$member->name]]></code>
      <code><![CDATA[$member->name]]></code>
      <code><![CDATA[$member->value]]></code>
    </MixedPropertyFetch>
    <NullReference>
      <code>$type</code>
      <code>$value</code>
    </NullReference>
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
      <code>$xml</code>
    </PossiblyInvalidArgument>
    <PossiblyInvalidMethodCall>
      <code>asXML</code>
    </PossiblyInvalidMethodCall>
    <RedundantCondition>
      <code><![CDATA[! empty($value) && is_array($value)]]></code>
      <code>is_array($value)</code>
    </RedundantCondition>
    <ReferenceConstraintViolation>
      <code>$type</code>
    </ReferenceConstraintViolation>
    <UndefinedMethod>
      <code>generate</code>
    </UndefinedMethod>
  </file>
  <file src="src/Client.php">
    <DeprecatedInterface>
      <code>Client</code>
    </DeprecatedInterface>
    <DocblockTypeContradiction>
      <code><![CDATA[$httpRequest->getUriString() === null]]></code>
      <code>is_array($params)</code>
    </DocblockTypeContradiction>
    <InvalidArgument>
      <code>$method</code>
    </InvalidArgument>
    <MixedArgument>
      <code>$type</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$param</code>
      <code>$signature</code>
      <code>$type</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>ServerProxy</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->proxyCache[$namespace]]]></code>
      <code><![CDATA[$this->proxyCache[$namespace]]]></code>
    </MixedReturnStatement>
    <PossiblyInvalidMethodCall>
      <code>addHeaderLine</code>
      <code>addHeaderLine</code>
      <code>addHeaderLine</code>
      <code>has</code>
      <code>has</code>
      <code>has</code>
    </PossiblyInvalidMethodCall>
    <PossiblyNullReference>
      <code>getMessage</code>
    </PossiblyNullReference>
    <PossiblyUndefinedMethod>
      <code>addHeaderLine</code>
      <code>addHeaderLine</code>
      <code>addHeaderLine</code>
      <code>has</code>
      <code>has</code>
      <code>has</code>
    </PossiblyUndefinedMethod>
    <PossiblyUndefinedVariable>
      <code>$signatures</code>
      <code>$signatures</code>
    </PossiblyUndefinedVariable>
    <PossiblyUnusedReturnValue>
      <code>ServerIntrospection</code>
      <code>\Laminas\Http\Client</code>
    </PossiblyUnusedReturnValue>
    <PropertyNotSetInConstructor>
      <code>$lastRequest</code>
      <code>$lastResponse</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
    <UnusedFunctionCall>
      <code>iconv_set_encoding</code>
      <code>iconv_set_encoding</code>
      <code>iconv_set_encoding</code>
    </UnusedFunctionCall>
  </file>
  <file src="src/Client/ServerIntrospection.php">
    <InvalidOperand>
      <code>$method</code>
    </InvalidOperand>
    <MixedArgument>
      <code>$method</code>
    </MixedArgument>
    <MixedArrayOffset>
      <code>$signatures[$method]</code>
      <code>$signatures[$methods[$i]]</code>
    </MixedArrayOffset>
    <MixedAssignment>
      <code>$method</code>
      <code>$method</code>
      <code>$signature</code>
      <code>$signatures[$methods[$i]]</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->system->listMethods()]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Client/ServerProxy.php">
    <MixedInferredReturnType>
      <code>ServerProxy</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->cache[$namespace]]]></code>
      <code><![CDATA[$this->cache[$namespace]]]></code>
    </MixedReturnStatement>
  </file>
  <file src="src/Fault.php">
    <DocblockTypeContradiction>
      <code>is_string($fault)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$code</code>
      <code>$message</code>
      <code>$message</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$struct['faultCode']]]></code>
      <code><![CDATA[$struct['faultString']]]></code>
    </MixedArrayAccess>
    <MixedArrayOffset>
      <code><![CDATA[$this->internal[$code]]]></code>
    </MixedArrayOffset>
    <MixedArrayTypeCoercion>
      <code><![CDATA[$this->internal[$code]]]></code>
    </MixedArrayTypeCoercion>
    <MixedAssignment>
      <code>$code</code>
      <code>$errors</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$message</code>
      <code>$struct</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>closeElement</code>
      <code>openElement</code>
    </MixedMethodCall>
    <MixedOperand>
      <code>$errors</code>
      <code><![CDATA[$item->message]]></code>
      <code>$result</code>
    </MixedOperand>
    <MixedPropertyFetch>
      <code><![CDATA[$item->message]]></code>
      <code><![CDATA[$item->message]]></code>
    </MixedPropertyFetch>
    <MixedReturnStatement>
      <code><![CDATA[$generator->flush()]]></code>
    </MixedReturnStatement>
    <PossiblyInvalidArgument>
      <code>$code</code>
    </PossiblyInvalidArgument>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$xml->fault->value->struct]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code>asXML</code>
    </PossiblyNullReference>
    <RedundantCastGivenDocblockType>
      <code>(int) $code</code>
      <code>(string) $message</code>
    </RedundantCastGivenDocblockType>
    <UnsafeInstantiation>
      <code>new static()</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Generator/AbstractGenerator.php">
    <MissingReturnType>
      <code>closeXmlElement</code>
      <code>openXmlElement</code>
      <code>writeTextData</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/DomDocument.php">
    <MissingReturnType>
      <code>writeTextData</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/GeneratorInterface.php">
    <MissingReturnType>
      <code>closeElement</code>
      <code>flush</code>
      <code>getEncoding</code>
      <code>openElement</code>
      <code>setEncoding</code>
    </MissingReturnType>
  </file>
  <file src="src/Generator/XmlWriter.php">
    <InvalidClass>
      <code>XMLWriter</code>
    </InvalidClass>
    <InvalidPropertyAssignmentValue>
      <code>new \XMLWriter()</code>
    </InvalidPropertyAssignmentValue>
    <TooManyArguments>
      <code>flush</code>
    </TooManyArguments>
    <UndefinedMethod>
      <code>endElement</code>
      <code>startElement</code>
      <code>text</code>
    </UndefinedMethod>
  </file>
  <file src="src/Request.php">
    <ArgumentTypeCoercion>
      <code>$request</code>
    </ArgumentTypeCoercion>
    <DocblockTypeContradiction>
      <code>! is_string($method)</code>
      <code>is_string($request)</code>
    </DocblockTypeContradiction>
    <MixedArgument>
      <code>$type</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$param['type']]]></code>
      <code><![CDATA[$param['value']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$arg</code>
      <code>$arg</code>
      <code>$arg</code>
      <code>$argv[]</code>
      <code>$param</code>
      <code>$param</code>
      <code>$params[]</code>
      <code>$type</code>
      <code>$types[]</code>
      <code>$value</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>closeElement</code>
      <code>generateXml</code>
      <code>openElement</code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$param->value]]></code>
    </MixedPropertyFetch>
    <MixedReturnStatement>
      <code><![CDATA[$generator->flush()]]></code>
    </MixedReturnStatement>
    <PossiblyNullIterator>
      <code><![CDATA[$xml->params->children()]]></code>
    </PossiblyNullIterator>
    <PossiblyUnusedProperty>
      <code>$xml</code>
    </PossiblyUnusedProperty>
    <PropertyNotSetInConstructor>
      <code>$fault</code>
      <code>$method</code>
      <code>$xml</code>
    </PropertyNotSetInConstructor>
    <RedundantConditionGivenDocblockType>
      <code>is_array($args)</code>
      <code><![CDATA[is_array($this->xmlRpcParams)]]></code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Request/Http.php">
    <DocblockTypeContradiction>
      <code><![CDATA[null === $this->headers]]></code>
    </DocblockTypeContradiction>
    <MixedAssignment>
      <code>$value</code>
    </MixedAssignment>
    <MixedOperand>
      <code>$value</code>
    </MixedOperand>
    <PossiblyUnusedMethod>
      <code>getFullRequest</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$headers</code>
      <code>$xml</code>
      <code>Http</code>
      <code>Http</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Request/Stdin.php">
    <PropertyNotSetInConstructor>
      <code>Stdin</code>
      <code>Stdin</code>
    </PropertyNotSetInConstructor>
    <UnusedClass>
      <code>Stdin</code>
    </UnusedClass>
  </file>
  <file src="src/Response.php">
    <DocblockTypeContradiction>
      <code>is_string($response)</code>
    </DocblockTypeContradiction>
    <InvalidPropertyFetch>
      <code><![CDATA[$xml->fault]]></code>
      <code><![CDATA[$xml->params]]></code>
    </InvalidPropertyFetch>
    <MixedAssignment>
      <code>$valueXml</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>asXML</code>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>openElement</code>
      <code>openElement</code>
    </MixedMethodCall>
    <MixedPropertyFetch>
      <code><![CDATA[$xml->params->param->value]]></code>
      <code><![CDATA[$xml->params->param->value]]></code>
    </MixedPropertyFetch>
    <MixedReturnStatement>
      <code><![CDATA[$generator->flush()]]></code>
    </MixedReturnStatement>
    <PossiblyUnusedProperty>
      <code>$type</code>
    </PossiblyUnusedProperty>
    <TypeDoesNotContainType>
      <code><![CDATA[! isset($xml->params)]]></code>
    </TypeDoesNotContainType>
  </file>
  <file src="src/Server.php">
    <ArgumentTypeCoercion>
      <code>$type</code>
    </ArgumentTypeCoercion>
    <DeprecatedInterface>
      <code>Server</code>
    </DeprecatedInterface>
    <DeprecatedMethod>
      <code>_buildSignature</code>
      <code>_buildSignature</code>
      <code>_dispatch</code>
    </DeprecatedMethod>
    <DocblockTypeContradiction>
      <code>! $request</code>
      <code>! $request</code>
    </DocblockTypeContradiction>
    <ImplementedReturnTypeMismatch>
      <code>Server</code>
      <code>array</code>
    </ImplementedReturnTypeMismatch>
    <InvalidNullableReturnType>
      <code>Response|Fault</code>
    </InvalidNullableReturnType>
    <InvalidParamDefault>
      <code>Request</code>
    </InvalidParamDefault>
    <InvalidReturnStatement>
      <code><![CDATA[$this->sendArgumentsToAllMethods]]></code>
      <code><![CDATA[$this->table]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>array</code>
      <code>self</code>
    </InvalidReturnType>
    <InvalidStringClass>
      <code>new $responseClass($return)</code>
    </InvalidStringClass>
    <LessSpecificReturnStatement>
      <code>new $responseClass($return)</code>
    </LessSpecificReturnStatement>
    <MixedArgument>
      <code>$argv</code>
      <code>$method</code>
      <code>$reflection</code>
    </MixedArgument>
    <MixedArgumentTypeCoercion>
      <code>$key</code>
      <code>$key</code>
    </MixedArgumentTypeCoercion>
    <MixedAssignment>
      <code>$method</code>
      <code>$reflection</code>
      <code>$return</code>
      <code>$sigParams</code>
      <code>$signature</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getParameters</code>
      <code>new $request()</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$this->typeMap[$type]]]></code>
    </MixedReturnStatement>
    <MoreSpecificImplementedParamType>
      <code>$class</code>
      <code>$fault</code>
      <code>$request</code>
    </MoreSpecificImplementedParamType>
    <MoreSpecificReturnType>
      <code>Response</code>
    </MoreSpecificReturnType>
    <PossiblyInvalidPropertyAssignmentValue>
      <code>$response</code>
    </PossiblyInvalidPropertyAssignmentValue>
    <PossiblyNullArgument>
      <code>$argv</code>
    </PossiblyNullArgument>
    <PossiblyNullReference>
      <code>getInvokeArguments</code>
      <code>setEncoding</code>
    </PossiblyNullReference>
    <PossiblyUnusedMethod>
      <code>isSubclassOf</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>$response</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(bool) $flag</code>
      <code>(bool) $flag</code>
    </RedundantCastGivenDocblockType>
    <RedundantConditionGivenDocblockType>
      <code><![CDATA[$this->sendArgumentsToAllMethods()]]></code>
      <code>is_object($definition)</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="src/Server/Fault.php">
    <DocblockTypeContradiction>
      <code>! is_string($class)</code>
    </DocblockTypeContradiction>
    <MixedAssignment>
      <code>$class</code>
      <code>$class</code>
    </MixedAssignment>
    <PossiblyInvalidArgument>
      <code>$code</code>
    </PossiblyInvalidArgument>
    <UndefinedClass>
      <code>$observer::observe($this)</code>
    </UndefinedClass>
    <UnsafeInstantiation>
      <code>new static($e)</code>
    </UnsafeInstantiation>
  </file>
  <file src="src/Server/System.php">
    <InvalidMethodCall>
      <code>getMethod</code>
      <code>getMethod</code>
      <code>getMethods</code>
      <code>hasMethod</code>
      <code>hasMethod</code>
    </InvalidMethodCall>
    <InvalidScalarArgument>
      <code>1</code>
    </InvalidScalarArgument>
    <MixedArgument>
      <code><![CDATA[$method['methodName']]]></code>
      <code>$table</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code><![CDATA[$method['methodName']]]></code>
      <code><![CDATA[$method['params']]]></code>
      <code><![CDATA[$method['prototypes']]]></code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$method</code>
      <code>$method</code>
      <code>$responses[]</code>
      <code>$table</code>
    </MixedAssignment>
    <MixedInferredReturnType>
      <code>array</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedMethodCall>
      <code>getMethodHelp</code>
      <code>toArray</code>
    </MixedMethodCall>
    <MixedReturnStatement>
      <code><![CDATA[$method['prototypes']]]></code>
      <code><![CDATA[$table->getMethod($method)->getMethodHelp()]]></code>
    </MixedReturnStatement>
    <PossiblyNullOperand>
      <code>var_export($methods, 1)</code>
    </PossiblyNullOperand>
    <PossiblyUndefinedMethod>
      <code>getCode</code>
      <code>getMessage</code>
    </PossiblyUndefinedMethod>
    <PossiblyUnusedMethod>
      <code>listMethods</code>
      <code>methodHelp</code>
      <code>methodSignature</code>
      <code>multicall</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Value/AbstractCollection.php">
    <MixedArrayAssignment>
      <code><![CDATA[$this->value[$key]]]></code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$value</code>
      <code>$value</code>
      <code>$values[$key]</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getValue</code>
    </MixedMethodCall>
    <PropertyNotSetInConstructor>
      <code>AbstractCollection</code>
      <code>AbstractCollection</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(array) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Value/AbstractScalar.php">
    <MixedMethodCall>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>openElement</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>generate</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="src/Value/ArrayValue.php">
    <MixedAssignment>
      <code>$val</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>generateXml</code>
      <code>openElement</code>
      <code>openElement</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>generate</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>ArrayValue</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/Base64.php">
    <MixedArgument>
      <code><![CDATA[$this->value]]></code>
    </MixedArgument>
    <PropertyNotSetInConstructor>
      <code>Base64</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Value/BigInteger.php">
    <ImplementedReturnTypeMismatch>
      <code>string</code>
    </ImplementedReturnTypeMismatch>
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->value]]></code>
    </MixedReturnStatement>
    <PropertyNotSetInConstructor>
      <code>BigInteger</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/Boolean.php">
    <PropertyNotSetInConstructor>
      <code>Boolean</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/DateTime.php">
    <MixedInferredReturnType>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->value]]></code>
    </MixedReturnStatement>
    <PossiblyInvalidArgument>
      <code><![CDATA[$e->getCode()]]></code>
    </PossiblyInvalidArgument>
    <PossiblyUnusedProperty>
      <code>$isoFormatString</code>
    </PossiblyUnusedProperty>
    <PropertyNotSetInConstructor>
      <code>DateTime</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/Double.php">
    <PropertyNotSetInConstructor>
      <code>Double</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(float) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Value/Integer.php">
    <MixedInferredReturnType>
      <code>int</code>
    </MixedInferredReturnType>
    <MixedReturnStatement>
      <code><![CDATA[$this->value]]></code>
    </MixedReturnStatement>
    <PropertyNotSetInConstructor>
      <code>Integer</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(int) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="src/Value/Nil.php">
    <PropertyNotSetInConstructor>
      <code>Nil</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/Struct.php">
    <MixedAssignment>
      <code>$val</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>generateXml</code>
      <code>openElement</code>
      <code>openElement</code>
    </MixedMethodCall>
    <PossiblyUnusedMethod>
      <code>generate</code>
    </PossiblyUnusedMethod>
    <PropertyNotSetInConstructor>
      <code>Struct</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="src/Value/Text.php">
    <PropertyNotSetInConstructor>
      <code>Text</code>
    </PropertyNotSetInConstructor>
    <RedundantCastGivenDocblockType>
      <code>(string) $value</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="test/AbstractTestProvider.php">
    <MixedInferredReturnType>
      <code>array</code>
      <code>array</code>
    </MixedInferredReturnType>
  </file>
  <file src="test/ClientTest.php">
    <InvalidArgument>
      <code>$method</code>
      <code><![CDATA['1']]></code>
      <code><![CDATA['add']]></code>
    </InvalidArgument>
    <MissingReturnType>
      <code>mockIntrospector</code>
      <code>setServerResponseTo</code>
    </MissingReturnType>
    <MixedMethodCall>
      <code>expects</code>
      <code>expects</code>
      <code>expects</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>getValue</code>
      <code>method</code>
      <code>method</code>
      <code>method</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>willReturn</code>
      <code>with</code>
      <code>with</code>
      <code>with</code>
    </MixedMethodCall>
    <UndefinedInterfaceMethod>
      <code>addResponse</code>
      <code>addResponse</code>
      <code>addResponse</code>
      <code>addResponse</code>
      <code>addResponse</code>
      <code>addResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
      <code>setResponse</code>
    </UndefinedInterfaceMethod>
    <UndefinedThisPropertyAssignment>
      <code><![CDATA[$this->mockedIntrospector]]></code>
    </UndefinedThisPropertyAssignment>
    <UnusedVariable>
      <code>$signature</code>
      <code>$time</code>
    </UnusedVariable>
  </file>
  <file src="test/FaultTest.php">
    <InvalidArgument>
      <code><![CDATA[['foo']]]></code>
    </InvalidArgument>
    <InvalidCast>
      <code><![CDATA[['foo']]]></code>
    </InvalidCast>
    <MissingReturnType>
      <code>testLoadXmlThrowsExceptionOnInvalidInput2</code>
      <code>testLoadXmlThrowsExceptionOnInvalidInput3</code>
      <code>testLoadXmlThrowsExceptionOnInvalidInput4</code>
    </MissingReturnType>
    <MixedAssignment>
      <code>$member</code>
    </MixedAssignment>
    <MixedPropertyFetch>
      <code><![CDATA[$member->name]]></code>
      <code><![CDATA[$member->value]]></code>
      <code><![CDATA[$member->value->int]]></code>
      <code><![CDATA[$member->value->string]]></code>
    </MixedPropertyFetch>
    <PossiblyInvalidArgument>
      <code>$xml</code>
      <code>$xml</code>
    </PossiblyInvalidArgument>
    <PossiblyNullIterator>
      <code><![CDATA[$sx->fault->value->struct->member]]></code>
    </PossiblyNullIterator>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$sx->fault->value]]></code>
      <code><![CDATA[$sx->fault->value->struct]]></code>
      <code><![CDATA[$sx->fault->value->struct->member]]></code>
    </PossiblyNullPropertyFetch>
    <RedundantCondition>
      <code>assertNotFalse</code>
      <code>assertNotFalse</code>
      <code>assertNotFalse</code>
    </RedundantCondition>
    <UnusedVariable>
      <code>$parsed</code>
      <code>$value2</code>
    </UnusedVariable>
  </file>
  <file src="test/GeneratorTest.php">
    <MissingReturnType>
      <code>assertXml</code>
      <code>testCreatingComplexXmlDocument</code>
      <code>testCreatingSingleElement</code>
      <code>testCreatingSingleElementWithValue</code>
      <code>testDifferentEncodings</code>
      <code>testFluentInterfacesProvided</code>
      <code>testFlushingGeneratorFlushesEverything</code>
      <code>testSpecialCharsAreEncoded</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$generator->flush()]]></code>
    </MixedArgument>
    <MixedMethodCall>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>closeElement</code>
      <code>closeElement</code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$actual->getEncoding()]]></code>
    </MixedOperand>
  </file>
  <file src="test/PhpInputMock.php">
    <MissingParamType>
      <code>$count</code>
      <code>$data</code>
      <code>$methodName</code>
      <code>$methodName</code>
      <code>$returnValue</code>
    </MissingParamType>
    <MissingPropertyType>
      <code>$arguments</code>
      <code>$data</code>
      <code>$position</code>
      <code>$returnValues</code>
    </MissingPropertyType>
    <MissingReturnType>
      <code>argumentsPassedTo</code>
      <code>methodWillReturn</code>
      <code>mockInput</code>
      <code>restoreDefault</code>
      <code>stream_eof</code>
      <code>stream_open</code>
      <code>stream_read</code>
      <code>stream_stat</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$count</code>
      <code>$count</code>
      <code>$methodName</code>
      <code>$methodName</code>
      <code>static::$data</code>
      <code>static::$data</code>
      <code>static::$data</code>
      <code>static::$data</code>
      <code>static::$returnValues</code>
      <code>static::$returnValues</code>
      <code>static::$returnValues</code>
      <code>static::$returnValues</code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>static::$arguments[$methodName]</code>
      <code>static::$returnValues[__FUNCTION__]</code>
      <code>static::$returnValues[__FUNCTION__]</code>
      <code>static::$returnValues[__FUNCTION__]</code>
      <code>static::$returnValues[__FUNCTION__]</code>
    </MixedArrayAccess>
    <MixedArrayAssignment>
      <code>static::$arguments[__FUNCTION__]</code>
      <code>static::$arguments[__FUNCTION__]</code>
      <code>static::$arguments[__FUNCTION__]</code>
      <code>static::$arguments[__FUNCTION__]</code>
      <code>static::$returnValues[$methodName]</code>
    </MixedArrayAssignment>
    <MixedAssignment>
      <code>$data</code>
      <code>static::$data</code>
      <code>static::$returnValues[$methodName]</code>
    </MixedAssignment>
    <PossiblyUnusedMethod>
      <code>stream_eof</code>
      <code>stream_open</code>
      <code>stream_read</code>
      <code>stream_stat</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedProperty>
      <code>$position</code>
    </PossiblyUnusedProperty>
    <UnusedFunctionCall>
      <code>stream_wrapper_restore</code>
      <code>stream_wrapper_unregister</code>
    </UnusedFunctionCall>
  </file>
  <file src="test/Request/HttpTest.php">
    <MixedArrayAccess>
      <code>$mode</code>
      <code>$path</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>[$path, $mode]</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getFullRequest</code>
      <code>getHeaders</code>
      <code>getRawRequest</code>
    </MixedMethodCall>
    <MixedOperand>
      <code><![CDATA[$this->xml]]></code>
    </MixedOperand>
    <PossiblyNullReference>
      <code>getCode</code>
    </PossiblyNullReference>
    <UndefinedThisPropertyAssignment>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->server]]></code>
      <code><![CDATA[$this->xml]]></code>
    </UndefinedThisPropertyAssignment>
    <UndefinedThisPropertyFetch>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->request]]></code>
      <code><![CDATA[$this->server]]></code>
      <code><![CDATA[$this->xml]]></code>
      <code><![CDATA[$this->xml]]></code>
      <code><![CDATA[$this->xml]]></code>
    </UndefinedThisPropertyFetch>
    <UnusedForeachValue>
      <code>$value</code>
    </UnusedForeachValue>
  </file>
  <file src="test/Request/TestAsset/HTTPTestExtension.php">
    <MixedAssignment>
      <code><![CDATA[$this->method]]></code>
    </MixedAssignment>
    <PropertyNotSetInConstructor>
      <code>HTTPTestExtension</code>
      <code>HTTPTestExtension</code>
      <code>HTTPTestExtension</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/RequestTest.php">
    <InvalidArgument>
      <code>$method</code>
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidCast>
      <code>new stdClass()</code>
    </InvalidCast>
    <MixedMethodCall>
      <code>getValue</code>
    </MixedMethodCall>
    <PossiblyNullArgument>
      <code>$result</code>
      <code>$result</code>
    </PossiblyNullArgument>
    <PossiblyNullArrayAccess>
      <code><![CDATA[$sx->params->param[0]]]></code>
      <code><![CDATA[$sx->params->param[1]]]></code>
    </PossiblyNullArrayAccess>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$sx->params->param]]></code>
      <code><![CDATA[$sx->params->param[0]->value]]></code>
      <code><![CDATA[$sx->params->param[0]->value->string]]></code>
      <code><![CDATA[$sx->params->param[1]->value]]></code>
      <code><![CDATA[$sx->params->param[1]->value->boolean]]></code>
      <code><![CDATA[$sxl->params->param]]></code>
      <code><![CDATA[$sxl->params->param->value]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code>getCode</code>
      <code>getCode</code>
      <code>getCode</code>
      <code>getCode</code>
      <code>getMessage</code>
      <code>getMessage</code>
      <code>getMessage</code>
      <code>getMessage</code>
    </PossiblyNullReference>
    <RedundantConditionGivenDocblockType>
      <code>is_string($method)</code>
    </RedundantConditionGivenDocblockType>
    <UnusedVariable>
      <code>$mName</code>
    </UnusedVariable>
  </file>
  <file src="test/ResponseTest.php">
    <InvalidArgument>
      <code>$value</code>
      <code><![CDATA[[$this, 'trackError']]]></code>
      <code>new stdClass()</code>
    </InvalidArgument>
    <InvalidCast>
      <code>new stdClass()</code>
    </InvalidCast>
    <MissingReturnType>
      <code>testLoadXmlCreatesFaultWithMissingNodes2</code>
      <code>testLoadXmlThrowsExceptionWithMissingNodes3</code>
    </MissingReturnType>
    <PossiblyNullPropertyFetch>
      <code><![CDATA[$sx->params->param]]></code>
      <code><![CDATA[$sx->params->param->value]]></code>
      <code><![CDATA[$sx->params->param->value->string]]></code>
    </PossiblyNullPropertyFetch>
    <PossiblyNullReference>
      <code>getCode</code>
      <code>getCode</code>
      <code>getCode</code>
      <code>getCode</code>
    </PossiblyNullReference>
    <PossiblyUnusedMethod>
      <code>trackError</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedParam>
      <code>$error</code>
    </PossiblyUnusedParam>
    <RedundantCondition>
      <code>assertNotFalse</code>
      <code>assertNotFalse</code>
      <code>assertNotFalse</code>
      <code>assertNotFalse</code>
    </RedundantCondition>
    <RedundantConditionGivenDocblockType>
      <code>assertFalse</code>
    </RedundantConditionGivenDocblockType>
  </file>
  <file src="test/Server/CacheTest.php">
    <MixedAssignment>
      <code>$actual</code>
      <code>$expected</code>
    </MixedAssignment>
  </file>
  <file src="test/Server/FaultTest.php">
    <UnusedVariable>
      <code>$fault</code>
      <code>$fault</code>
      <code>$fault</code>
    </UnusedVariable>
  </file>
  <file src="test/Server/TestAsset/Observer.php">
    <PossiblyUnusedMethod>
      <code>observe</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/ServerTest.php">
    <InvalidArgument>
      <code>$o</code>
      <code>$o</code>
      <code>$this</code>
      <code><![CDATA['foo']]></code>
    </InvalidArgument>
    <InvalidMethodCall>
      <code>getMethod</code>
    </InvalidMethodCall>
    <MissingReturnType>
      <code>testCanMarshalBase64Requests</code>
      <code>testHandle2</code>
      <code>testLoadFunctionsThrowsExceptionsWithBadData2</code>
      <code>testLoadFunctionsThrowsExceptionsWithBadData3</code>
      <code>testRequestResponseEncoding2</code>
    </MissingReturnType>
    <MixedArgument>
      <code>$help</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
    </MixedArgument>
    <MixedAssignment>
      <code>$actual</code>
      <code>$expected</code>
      <code>$help</code>
      <code>$method</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$methods</code>
      <code>$prototype</code>
      <code>$response</code>
      <code>$response</code>
      <code>$response</code>
      <code>$response</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getPrototypes</code>
      <code>getReturnType</code>
    </MixedMethodCall>
    <PossiblyNullReference>
      <code>getEncoding</code>
      <code>getEncoding</code>
    </PossiblyNullReference>
  </file>
  <file src="test/TestAsset/SerializableTestClass.php">
    <MissingConstructor>
      <code>$property</code>
    </MissingConstructor>
    <PossiblyUnusedMethod>
      <code>getProperty</code>
    </PossiblyUnusedMethod>
  </file>
  <file src="test/TestAsset/TestClass.php">
    <InvalidReturnStatement>
      <code><![CDATA[['test1' => $this->value1, 'test2' => $this->value2, 'arg' => func_get_args()]]]></code>
    </InvalidReturnStatement>
    <InvalidReturnType>
      <code>struct</code>
    </InvalidReturnType>
    <MixedArgumentTypeCoercion>
      <code>(array) $array</code>
    </MixedArgumentTypeCoercion>
    <MixedInferredReturnType>
      <code>base64</code>
    </MixedInferredReturnType>
    <PossiblyUnusedMethod>
      <code>__construct</code>
      <code>base64</code>
      <code>test1</code>
      <code>test2</code>
      <code>test3</code>
      <code>test4</code>
    </PossiblyUnusedMethod>
    <PossiblyUnusedParam>
      <code>$data</code>
    </PossiblyUnusedParam>
    <RedundantCastGivenDocblockType>
      <code>(array) $array</code>
      <code>(string) $string</code>
    </RedundantCastGivenDocblockType>
    <UndefinedDocblockClass>
      <code>base64</code>
      <code>base64</code>
      <code>struct</code>
    </UndefinedDocblockClass>
  </file>
  <file src="test/TestAsset/TestClient.php">
    <DeprecatedInterface>
      <code>TestClient</code>
    </DeprecatedInterface>
    <PropertyNotSetInConstructor>
      <code>TestClient</code>
      <code>TestClient</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/TestAsset/TestRequest.php">
    <PropertyNotSetInConstructor>
      <code>TestRequest</code>
      <code>TestRequest</code>
      <code>TestRequest</code>
    </PropertyNotSetInConstructor>
  </file>
  <file src="test/TestAsset/functions.php">
    <MixedArgumentTypeCoercion>
      <code>(array) $var1</code>
    </MixedArgumentTypeCoercion>
    <RedundantCastGivenDocblockType>
      <code>(array) $var1</code>
    </RedundantCastGivenDocblockType>
  </file>
  <file src="test/ValueTest.php">
    <ForbiddenCode>
      <code>var_dump($x)</code>
    </ForbiddenCode>
    <MissingReturnType>
      <code>testMarshalBase64FromString</code>
    </MissingReturnType>
    <MixedArgument>
      <code><![CDATA[$val->getValue()]]></code>
      <code><![CDATA[$val->getValue()]]></code>
      <code><![CDATA[$val->getValue()]]></code>
    </MixedArgument>
    <MixedArrayAccess>
      <code>$a[0]</code>
      <code>$a[1]</code>
      <code>$a[2]</code>
    </MixedArrayAccess>
    <MixedAssignment>
      <code>$a</code>
      <code>$o2</code>
      <code>$received</code>
    </MixedAssignment>
    <MixedMethodCall>
      <code>getProperty</code>
    </MixedMethodCall>
    <UnusedVariable>
      <code>$native</code>
      <code>$val</code>
    </UnusedVariable>
  </file>
</files>
